# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _ArcC
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class ARC_Font(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARC_Font, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARC_Font, name)
    __repr__ = _swig_repr
    __swig_setmethods__["height"] = _ArcC.ARC_Font_height_set
    __swig_getmethods__["height"] = _ArcC.ARC_Font_height_get
    if _newclass:height = _swig_property(_ArcC.ARC_Font_height_get, _ArcC.ARC_Font_height_set)
    __swig_setmethods__["textures"] = _ArcC.ARC_Font_textures_set
    __swig_getmethods__["textures"] = _ArcC.ARC_Font_textures_get
    if _newclass:textures = _swig_property(_ArcC.ARC_Font_textures_get, _ArcC.ARC_Font_textures_set)
    __swig_setmethods__["list_base"] = _ArcC.ARC_Font_list_base_set
    __swig_getmethods__["list_base"] = _ArcC.ARC_Font_list_base_get
    if _newclass:list_base = _swig_property(_ArcC.ARC_Font_list_base_get, _ArcC.ARC_Font_list_base_set)
    def __init__(self, *args): 
        this = _ArcC.new_ARC_Font(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ArcC.delete_ARC_Font
    __del__ = lambda self : None;
ARC_Font_swigregister = _ArcC.ARC_Font_swigregister
ARC_Font_swigregister(ARC_Font)
cvar = _ArcC.cvar

ARC_FontInit = _ArcC.ARC_FontInit
ARC_FontLoad = _ArcC.ARC_FontLoad
ARC_FontQuit = _ArcC.ARC_FontQuit
ARC_FontRender = _ArcC.ARC_FontRender
ARC_LogInit = _ArcC.ARC_LogInit
ARC_Log = _ArcC.ARC_Log
class ARC_Time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARC_Time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARC_Time, name)
    __repr__ = _swig_repr
    __swig_setmethods__["currTime"] = _ArcC.ARC_Time_currTime_set
    __swig_getmethods__["currTime"] = _ArcC.ARC_Time_currTime_get
    if _newclass:currTime = _swig_property(_ArcC.ARC_Time_currTime_get, _ArcC.ARC_Time_currTime_set)
    __swig_setmethods__["prevTime"] = _ArcC.ARC_Time_prevTime_set
    __swig_getmethods__["prevTime"] = _ArcC.ARC_Time_prevTime_get
    if _newclass:prevTime = _swig_property(_ArcC.ARC_Time_prevTime_get, _ArcC.ARC_Time_prevTime_set)
    __swig_setmethods__["fps"] = _ArcC.ARC_Time_fps_set
    __swig_getmethods__["fps"] = _ArcC.ARC_Time_fps_get
    if _newclass:fps = _swig_property(_ArcC.ARC_Time_fps_get, _ArcC.ARC_Time_fps_set)
    __swig_setmethods__["frames"] = _ArcC.ARC_Time_frames_set
    __swig_getmethods__["frames"] = _ArcC.ARC_Time_frames_get
    if _newclass:frames = _swig_property(_ArcC.ARC_Time_frames_get, _ArcC.ARC_Time_frames_set)
    __swig_setmethods__["msPassed"] = _ArcC.ARC_Time_msPassed_set
    __swig_getmethods__["msPassed"] = _ArcC.ARC_Time_msPassed_get
    if _newclass:msPassed = _swig_property(_ArcC.ARC_Time_msPassed_get, _ArcC.ARC_Time_msPassed_set)
    def __init__(self, *args): 
        this = _ArcC.new_ARC_Time(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ArcC.delete_ARC_Time
    __del__ = lambda self : None;
ARC_Time_swigregister = _ArcC.ARC_Time_swigregister
ARC_Time_swigregister(ARC_Time)

ARC_TimeProcess = _ArcC.ARC_TimeProcess
ARC_TimeSleep = _ArcC.ARC_TimeSleep
Arc_TimeGetElapsed = _ArcC.Arc_TimeGetElapsed
ARC_TimeGetElapsedSec = _ArcC.ARC_TimeGetElapsedSec
ARC_TimeGetFPS = _ArcC.ARC_TimeGetFPS
ARC_TimeLimitFPS = _ArcC.ARC_TimeLimitFPS
class ARC_Window(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARC_Window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARC_Window, name)
    __repr__ = _swig_repr
    __swig_setmethods__["title"] = _ArcC.ARC_Window_title_set
    __swig_getmethods__["title"] = _ArcC.ARC_Window_title_get
    if _newclass:title = _swig_property(_ArcC.ARC_Window_title_get, _ArcC.ARC_Window_title_set)
    __swig_setmethods__["size"] = _ArcC.ARC_Window_size_set
    __swig_getmethods__["size"] = _ArcC.ARC_Window_size_get
    if _newclass:size = _swig_property(_ArcC.ARC_Window_size_get, _ArcC.ARC_Window_size_set)
    __swig_setmethods__["isFullscreen"] = _ArcC.ARC_Window_isFullscreen_set
    __swig_getmethods__["isFullscreen"] = _ArcC.ARC_Window_isFullscreen_get
    if _newclass:isFullscreen = _swig_property(_ArcC.ARC_Window_isFullscreen_get, _ArcC.ARC_Window_isFullscreen_set)
    __swig_setmethods__["isResizable"] = _ArcC.ARC_Window_isResizable_set
    __swig_getmethods__["isResizable"] = _ArcC.ARC_Window_isResizable_get
    if _newclass:isResizable = _swig_property(_ArcC.ARC_Window_isResizable_get, _ArcC.ARC_Window_isResizable_set)
    __swig_setmethods__["bpp"] = _ArcC.ARC_Window_bpp_set
    __swig_getmethods__["bpp"] = _ArcC.ARC_Window_bpp_get
    if _newclass:bpp = _swig_property(_ArcC.ARC_Window_bpp_get, _ArcC.ARC_Window_bpp_set)
    __swig_setmethods__["screen"] = _ArcC.ARC_Window_screen_set
    __swig_getmethods__["screen"] = _ArcC.ARC_Window_screen_get
    if _newclass:screen = _swig_property(_ArcC.ARC_Window_screen_get, _ArcC.ARC_Window_screen_set)
    def __init__(self, *args): 
        this = _ArcC.new_ARC_Window(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ArcC.delete_ARC_Window
    __del__ = lambda self : None;
ARC_Window_swigregister = _ArcC.ARC_Window_swigregister
ARC_Window_swigregister(ARC_Window)

ARC_WindowInit = _ArcC.ARC_WindowInit
ARC_WindowResize = _ArcC.ARC_WindowResize
ARC_WindowQuit = _ArcC.ARC_WindowQuit
ARC_WindowToggleFullScreen = _ArcC.ARC_WindowToggleFullScreen
ARC_WindowSaveBMP = _ArcC.ARC_WindowSaveBMP
ARC_WindowClear = _ArcC.ARC_WindowClear


