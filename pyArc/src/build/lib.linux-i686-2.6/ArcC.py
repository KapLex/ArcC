# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _ArcC
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Window(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Window, name)
    __repr__ = _swig_repr
    __swig_setmethods__["title"] = _ArcC.Window_title_set
    __swig_getmethods__["title"] = _ArcC.Window_title_get
    if _newclass:title = _swig_property(_ArcC.Window_title_get, _ArcC.Window_title_set)
    __swig_setmethods__["width"] = _ArcC.Window_width_set
    __swig_getmethods__["width"] = _ArcC.Window_width_get
    if _newclass:width = _swig_property(_ArcC.Window_width_get, _ArcC.Window_width_set)
    __swig_setmethods__["height"] = _ArcC.Window_height_set
    __swig_getmethods__["height"] = _ArcC.Window_height_get
    if _newclass:height = _swig_property(_ArcC.Window_height_get, _ArcC.Window_height_set)
    __swig_setmethods__["isFullscreen"] = _ArcC.Window_isFullscreen_set
    __swig_getmethods__["isFullscreen"] = _ArcC.Window_isFullscreen_get
    if _newclass:isFullscreen = _swig_property(_ArcC.Window_isFullscreen_get, _ArcC.Window_isFullscreen_set)
    __swig_setmethods__["isResizable"] = _ArcC.Window_isResizable_set
    __swig_getmethods__["isResizable"] = _ArcC.Window_isResizable_get
    if _newclass:isResizable = _swig_property(_ArcC.Window_isResizable_get, _ArcC.Window_isResizable_set)
    __swig_setmethods__["bpp"] = _ArcC.Window_bpp_set
    __swig_getmethods__["bpp"] = _ArcC.Window_bpp_get
    if _newclass:bpp = _swig_property(_ArcC.Window_bpp_get, _ArcC.Window_bpp_set)
    __swig_setmethods__["screen"] = _ArcC.Window_screen_set
    __swig_getmethods__["screen"] = _ArcC.Window_screen_get
    if _newclass:screen = _swig_property(_ArcC.Window_screen_get, _ArcC.Window_screen_set)
    def __init__(self, *args): 
        this = _ArcC.new_Window(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ArcC.delete_Window
    __del__ = lambda self : None;
Window_swigregister = _ArcC.Window_swigregister
Window_swigregister(Window)
cvar = _ArcC.cvar

ARC_OpenWindow = _ArcC.ARC_OpenWindow
ARC_Resize = _ArcC.ARC_Resize
ARC_Quit = _ArcC.ARC_Quit
ARC_ToggleFullScreen = _ArcC.ARC_ToggleFullScreen
ARC_SaveBMP = _ArcC.ARC_SaveBMP
ARC_Clear = _ArcC.ARC_Clear
initLog = _ArcC.initLog
initSDL = _ArcC.initSDL
buildVideoFlags = _ArcC.buildVideoFlags
setupPixelDepth = _ArcC.setupPixelDepth
setupPixelFormat = _ArcC.setupPixelFormat
printVendor = _ArcC.printVendor
resizeGL = _ArcC.resizeGL
setGLStates = _ArcC.setGLStates
ARC_InitLogger = _ArcC.ARC_InitLogger


